from datetime import (datetime)
from functools import partial
import sys
import os
import PyQt5.QtCore
from PyQt5.QtCore import Qt, QTimer, QDate
from PyQt5.QtGui import QIcon
from PyQt5.QtMultimedia import QSoundEffect
from PyQt5.QtWidgets import (QWidget, QApplication, 
                             QLCDNumber, QSlider, 
                             QVBoxLayout, QHBoxLayout, 
                             QPushButton, QLabel, QToolTip, 
                             QMessageBox, QCalendarWidget,
                             QComboBox, QCheckBox)
from PyQt5.QtWidgets import QWidget, QApplication
from PyQt5.QtGui import QPainter, QColor

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.Window_Options_init()
        self.clock_Options_init()
        self.Special_Clock_Options_init()
        self.Timer_Options_init()
        self.Stopwatch_Options_init()
        self.Calendar_Options_init()
        self.Alarmclock_Options_init()
        
        self.begin_clock()
        self.start_special_clock()
        self.play_alarmclock()

    def paintEvent(self, event):
        qp = QPainter()
        qp.begin(self)
        self.drawBack(qp)
        qp.end()
 
    def drawBack(self,qp):
        qp.setBrush(QColor(120, 168, 227))
        qp.drawRect(20, 140, 268, 300)
        
        qp.setBrush(QColor(235, 235, 124))
        qp.drawRect(290, 305, 720, 300)
        
        qp.setBrush(QColor(155, 235, 94))
        qp.drawRect(710, 140, 300, 160)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            reply = QMessageBox.question(self, 'Message', "Выйти из программы?", 
                                         QMessageBox.Yes | QMessageBox.No, 
                                         QMessageBox.No)
            if reply == QMessageBox.Yes:
                self.close()

    def Window_Options_init(self):
        self.setGeometry(500, 500, 1200, 1000)
        self.setWindowTitle('Alarm')

        
    def clock_Options_init(self): 
        self.clock = QLCDNumber(self)
        self.clock.setToolTip('Главные часы')
        self.clock.move(275, 30)
        self.clock.resize(450, 100)    
        self.clock.setDigitCount(8)
        
        time_now = datetime.now()
        
        self.clock_date_lcd = QLCDNumber(self)
        self.clock_date_lcd.setDigitCount(10)
        self.clock_date_lcd.resize(200, 70)
        self.clock_date_lcd.move(400, 150)
        self.clock_date_lcd.setToolTip('День/месяц/год')
        
    def Special_Clock_Options_init(self):
        self.dop_clock_label = QLabel(self)
        self.dop_clock_label.resize(200, 40)
        self.dop_clock_label.move(750, 20)
        self.dop_clock_label.setToolTip('UTC на побочных часах')
        self.dop_clock_label.setText('На побочных часах: UTC-12')
        
        self.dop_clock_lcd = QLCDNumber(self)
        self.dop_clock_lcd.setDigitCount(8)
        self.dop_clock_lcd.resize(200, 80)
        self.dop_clock_lcd.move(40, 40)
        self.dop_clock_lcd.setToolTip('Побочные часы')
        
        self.special_clock_utc_combo = QComboBox(self)
        self.special_clock_utc_combo.move(750, 60)
        self.special_clock_utc_combo.resize(200, 30)
        utc = open('utc_data.txt',  encoding="utf-8").read().split('\n')
        for string in utc:
            self.special_clock_utc_combo.addItem(string.split(' — ')[0])
            
        self.special_clock_utc_combo.activated[str].connect(self.change_utc_combo_value)

        self.special_clock_utc_value = int(0)
           
    def Timer_Options_init(self):
        self.timer = QLCDNumber(self)
        self.timer.setDigitCount(8)
        self.timer.display('00' + ':' + '00' + ':' + '00')
        self.timer_value = '00' + ':' + '00' + ':' + '00'
        self.timer.setToolTip('Таймер')
        
        self.slider_timer_second = QSlider(Qt.Horizontal, self)
        self.slider_timer_second.setToolTip('Секунды')
        self.slider_timer_minute = QSlider(Qt.Horizontal, self)
        self.slider_timer_minute.setToolTip('Минуты')
        self.slider_timer_hour = QSlider(Qt.Horizontal, self)
        self.slider_timer_hour.setToolTip('Часы')
        
        self.slider_timer_second.setMinimum(0)
        self.slider_timer_minute.setMinimum(0)
        self.slider_timer_hour.setMinimum(0)
        
        self.slider_timer_second.setMaximum(59)
        self.slider_timer_minute.setMaximum(59)
        self.slider_timer_hour.setMaximum(47)
        
        self.slider_timer_second.valueChanged.connect(self.change_timer_sec)
        self.slider_timer_minute.valueChanged.connect(self.change_timer_min)
        self.slider_timer_hour.valueChanged.connect(self.change_timer_hour)        
        
        self.start_timer_btn = QPushButton('Start', self)
        self.start_timer_btn.clicked.connect(self.start_tick_timer)
        self.start_timer_btn.setToolTip('Запустить таймер')
        
        self.finish_timer_btn = QPushButton('Finish', self)
        self.finish_timer_btn.clicked.connect(self.finish_tick_timer)
        self.finish_timer_btn.setEnabled(False)
        self.finish_timer_btn.setToolTip('Остановить таймер')
        
        self.timer.move(30, 150)
        self.timer.resize(250, 100)
        
        self.slider_timer_second.move(30, 270)
        self.slider_timer_second.resize(200, 30)
        self.label_timer_second = QLabel(self)
        self.label_timer_second.setText('SEC')
        self.label_timer_second.resize(30, 30)
        self.label_timer_second.move(240, 270)
        
        self.slider_timer_minute.move(30, 310)
        self.slider_timer_minute.resize(200, 30)
        self.label_timer_minute = QLabel(self)
        self.label_timer_minute.setText('MIN')
        self.label_timer_minute.resize(30, 30)
        self.label_timer_minute.move(240, 310)
        
        self.slider_timer_hour.move(30, 350)
        self.slider_timer_hour.resize(200, 30) 
        self.label_timer_hour = QLabel(self)
        self.label_timer_hour.setText('HOUR')
        self.label_timer_hour.resize(40, 30)
        self.label_timer_hour.move(240, 350)
        
        self.start_timer_btn.move(30, 400)
        self.start_timer_btn.resize(80, 30)
        
        self.finish_timer_btn.move(200, 400)
        self.finish_timer_btn.resize(80, 30)
        
    def Stopwatch_Options_init(self): 
        self.stopwatch = QLCDNumber(self)
        self.stopwatch.setDigitCount(8)
        self.stopwatch.display('00:00:00')
        self.stopwatch_value = '00:00:00'
        self.stopwatch.move(720, 150)
        self.stopwatch.resize(250, 100)
        self.stopwatch.setToolTip('Секундомер')
        
        self.start_stopwatch_btn = QPushButton(self)
        self.start_stopwatch_btn.setText('Start')
        self.start_stopwatch_btn.resize(80, 30)
        self.start_stopwatch_btn.move(720, 270)
        self.start_stopwatch_btn.clicked.connect(self.start_tick_stopwatch)
        self.start_stopwatch_btn.setToolTip('Запустить секундомер')
        
        self.stop_stopwatch_btn = QPushButton(self)
        self.stop_stopwatch_btn.setText('Finish')
        self.stop_stopwatch_btn.resize(80, 30)
        self.stop_stopwatch_btn.move(890, 270)
        self.stop_stopwatch_btn.setEnabled(False)
        self.stop_stopwatch_btn.clicked.connect(self.stop_tick_stopwatch)
        self.stop_stopwatch_btn.setToolTip('Остановить секундомер')
        
        self.clear_stopwatch_btn = QPushButton(self)
        self.clear_stopwatch_btn.setText('Clear')
        self.clear_stopwatch_btn.resize(80, 30)
        self.clear_stopwatch_btn.move(805, 270)
        self.clear_stopwatch_btn.setEnabled(False)
        self.clear_stopwatch_btn.clicked.connect(self.clear_tick_stopwatch)
        self.clear_stopwatch_btn.setToolTip('Очистить значение на таймере')
 
    def Calendar_Options_init(self):
        self.calendar = PyQt5.QtWidgets.QCalendarWidget(self)
        self.calendar.setGeometry(PyQt5.QtCore.QRect(260, 202, 381, 261))
        self.calendar.setGridVisible(True)
        self.calendar.clicked[QDate].connect(self.change_calendar_value)
        self.calendar.move(300, 310)
        self.calendar.setToolTip('Календарь')
        temp = str(self.calendar.selectedDate()).split('PyQt5.QtCore.QDate(')[1][:-1]
        self.calendar_value = '.'.join(temp.split(', '))
        
    def Alarmclock_Options_init(self):
        
        self.alarmclock_lcd = QLCDNumber(self)
        self.alarmclock_lcd.setDigitCount(8)
        self.alarmclock_lcd.setToolTip('Будильник')
        self.alarmclock_lcd.display('00:00:00')
        self.alarmclock_lcd.move(720, 310)
        self.alarmclock_lcd.resize(250, 80)
        
        self.slider_alarmclock_minute = QSlider(Qt.Horizontal, self)

        self.slider_alarmclock_hour = QSlider(Qt.Horizontal, self)
        
        self.slider_alarmclock_minute.setMinimum(0)
        self.slider_alarmclock_hour.setMinimum(0)
        
        self.slider_alarmclock_minute.setMaximum(59)
        self.slider_alarmclock_hour.setMaximum(23)
        
        self.slider_alarmclock_minute.move(720, 400)
        self.slider_alarmclock_hour.move(720, 450)
        
        self.label_alarmclock_minute = QLabel(self)
        self.label_alarmclock_minute.setText('MIN')
        self.label_alarmclock_minute.resize(30, 30)
        self.label_alarmclock_minute.move(930, 400)        
        
        self.slider_alarmclock_minute.resize(200, 30)
        self.slider_alarmclock_hour.resize(200, 30)
        self.label_alarmclock_hour = QLabel(self)
        self.label_alarmclock_hour.setText('HOUR')
        self.label_alarmclock_hour.resize(40, 30)
        self.label_alarmclock_hour.move(930, 450)  
        
        self.alarmclock_value = '00:00:00'
        self.type_of_alarm_value = 'music_1'
        
        self.next_alarm = QLabel(self)
        self.next_alarm.move(710, 525)
        self.next_alarm.resize(500, 50)
        file_1 = open('data.txt')
        file = file_1.read()
        if file is '':
            self.next_alarm.setText('Следующий будильник не установлен')
        else:
            self.next_alarm.setText('Следующий будильник ' + str(file.split()[0].split(':')[1]) + 
                                    ' в ' + str(':'.join(file.split()[1].split(':')[1:3])))

        file_1.close()
        self.slider_alarmclock_minute.valueChanged.connect(self.change_alarmclock_min)
        self.slider_alarmclock_hour.valueChanged.connect(self.change_alarmclock_hour)
        
        self.alarmclock_types_combo = QComboBox(self)
        self.alarmclock_types_combo.move(700, 500)
        self.alarmclock_types_combo.resize(200, 30)
        for i in range(1, 8):
            self.alarmclock_types_combo.addItem('Звук ' + str(i))
        self.alarmclock_types_combo.activated[str].connect(self.change_alarm_type_value)
        
        self.change_alarm_btn = QPushButton(self)
        self.change_alarm_btn.resize(100, 30)
        self.change_alarm_btn.move(900, 500)
        self.change_alarm_btn.setText('Новый')
        self.change_alarm_btn.clicked.connect(self.add_alarm)
        self.change_alarm_btn.setToolTip('Создать или обновить будильник (выберете время, дату, и мелодию')
        
        self.clear_alarm_btn = QPushButton(self)
        self.clear_alarm_btn.resize(100, 30)
        self.clear_alarm_btn.move(900, 560)
        self.clear_alarm_btn.setText('Удатить')
        self.clear_alarm_btn.clicked.connect(self.clear_alarm_data)
        self.clear_alarm_btn.setToolTip('Очистить')
        
        

    def toggle_timer_btns(self, value):
        self.slider_timer_second.setEnabled(value)
        self.slider_timer_minute.setEnabled(value)
        self.slider_timer_hour.setEnabled(value)
        self.start_timer_btn.setEnabled(value)
        
    def start_tick_timer(self):
        if self.timer_value != '00:00:00':
            self.toggle_timer_btns(False)
            self.temp_timer_data = self.timer_value
            self.tick_timer(break_timer=False)
            self.finish_timer_btn.setEnabled(True)
            
    def finish_tick_timer(self):
        self.tick_timer(break_timer=True)
        self.finish_timer_btn.setEnabled(False)
        
    def tick_timer(self, break_timer):
        if break_timer:
            self.toggle_timer_btns(True)
            self.timer.display(self.temp_timer_data)
            self.timer_value = str('00:00:00')
            
        else:   
            timer_value = self.timer_value
            if int(timer_value[6:]) > 0:
                self.change_timer_sec(int(timer_value[6:]) - 1)
                QTimer().singleShot(1000,
                                    partial(self.tick_timer, break_timer=False))
            else:
                if int(timer_value[3:5]) > 0:
                    self.change_timer_sec(59)
                    self.change_timer_min(int(timer_value[3:5]) - 1)
                    QTimer().singleShot(1000,
                                        partial(self.tick_timer, break_timer=False))
                else:
                    if int(timer_value[:2]) > 0:
                        self.change_timer_sec(59)
                        self.change_timer_min(59)
                        self.change_timer_hour(int(timer_value[:2]) - 1)
                        QTimer().singleShot(1000,
                                            partial(self.tick_timer, break_timer=False))
                    else:
                        os.system("start timer_1.wav")
                        self.toggle_timer_btns(True)
                        self.timer.display(self.temp_timer_data)
                        self.timer_value = str(self.temp_timer_data)
                        self.finish_timer_btn.setEnabled(False)
                        
        
    def change_timer_sec(self, value):
        fixed_data = self.timer_value[:6] + str(int(value)).rjust(2, '0')
        self.timer.display(fixed_data)
        self.timer_value = fixed_data
        
    def change_timer_min(self, value):
        fixed_data = (self.timer_value[:3] + 
                      str(int(value)).rjust(2, '0') + self.timer_value[5:])
        self.timer.display(fixed_data)
        self.timer_value = fixed_data
        
    def change_timer_hour(self, value):
        fixed_data = str(int(value)).rjust(2, '0') + self.timer_value[2:]
        self.timer.display(fixed_data)
        self.timer_value = fixed_data
    
 
    def start_tick_stopwatch(self):
        self.temp_stopwatch_data = self.timer_value
        self.stopwatch.display('00:00:00')
        self.stopwatch_value = '00:00:00'
        self.tick_stopwatch(break_stopwatch=False)
        self.stop_stopwatch_btn.setEnabled(True)
        self.start_stopwatch_btn.setEnabled(False)
        
    def stop_tick_stopwatch(self):
        self.tick_stopwatch(break_stopwatch=True)
        self.stop_stopwatch_btn.setEnabled(False)
        self.clear_stopwatch_btn.setEnabled(True)
        
    def clear_tick_stopwatch(self):
        self.stopwatch.display('00:00:00')
        self.stopwatch_value = '00:00:00'
        self.stop_stopwatch_btn.setEnabled(False)
        self.start_stopwatch_btn.setEnabled(True)
        self.clear_stopwatch_btn.setEnabled(False)
        
    def tick_stopwatch(self, break_stopwatch):
        if break_stopwatch:
            self.temp_stopwatch_data = str(self.stopwatch_value)
            self.stopwatch.display(self.temp_stopwatch_data)
            self.stopwatch_value = '99:59:59'
        else:
            stopwatch_value = self.stopwatch_value
            if int(stopwatch_value[6:]) < 59:
                self.change_stopwatch_sec(int(stopwatch_value[6:]) + 1)
                QTimer().singleShot(1000, 
                                    partial(self.tick_stopwatch, break_stopwatch=False))
            else:
                if int(stopwatch_value[3:5]) < 59:
                    self.change_stopwatch_sec(0)
                    self.change_stopwatch_min(int(stopwatch_value[3:5]) + 1)
                    QTimer().singleShot(1000, 
                                        partial(self.tick_stopwatch, break_stopwatch=False))
                else:
                    if int(stopwatch_value[:2]) < 99:
                        self.change_stopwatch_sec(0)
                        self.change_stopwatch_min(0)
                        self.change_stopwatch_hour(int(stopwatch_value[:2]) + 1)
                        QTimer().singleShot(1000, 
                                            partial(self.tick_stopwatch, break_stopwatch=False))
                    else:
                        self.stop_stopwatch_btn.setEnabled(False)
                        self.stopwatch.display(self.temp_stopwatch_data)
                        self.stopwatch_value = str(self.temp_stopwatch_data)        
        
    
    def change_stopwatch_sec(self, value):
        fixed_data = self.stopwatch_value[:6] + str(int(value)).rjust(2, '0')
        self.stopwatch.display(fixed_data)
        self.stopwatch_value = fixed_data
        
    def change_stopwatch_min(self, value):
        fixed_data = (self.stopwatch_value[:3] + str(int(value)).rjust(2, '0') 
                      + self.stopwatch_value[5:])
        self.stopwatch.display(fixed_data)
        self.stopwatch_value = fixed_data
        
    def change_stopwatch_hour(self, value):
        fixed_data = str(int(value)).rjust(2, '0') + self.stopwatch_value[2:]
        self.stopwatch.display(fixed_data)
        self.stopwatch_value = fixed_data
        

    def begin_clock(self):
        time_now = datetime.now()
        self.time_now_value = time_now.strftime('%H:%M:%S')
        self.date_value = time_now.strftime('%Y.%m.%d')
        self.clock.display(time_now.strftime('%H' + ':' + '%M' + ':' + '%S'))
        self.clock_date_lcd.display(time_now.strftime('%d-%m-%Y'))
        QTimer().singleShot(1000, self.begin_clock)
        

    def change_utc_combo_value(self, text): 
        self.special_clock_utc_value = int(text[3:5])
        self.dop_clock_label.setText('На дополнительных часах: ' + text)
        
    def start_special_clock(self):
        time_now = datetime.now()
        data_fixed = time_now.strftime('%H' + ':' + '%M' + ':' + '%S')
        data_fixed = (str((int(data_fixed[:2]) - 3 + self.special_clock_utc_value) % 24) 
                      + data_fixed[2:])
        self.dop_clock_lcd.display(data_fixed)
        QTimer().singleShot(1000, self.start_special_clock)
        

    def play_alarmclock(self):
        if self.time_now_value == self.alarmclock_value and self.date_value == self.calendar_value:
            os.system("start str(self.type_of_alarm_value)+'.wav'")
        QTimer().singleShot(1000, self.play_alarmclock)
        
    def change_alarmclock_min(self, value):
        fixed_data = (self.alarmclock_value[:3] + str(int(value)).rjust(2, '0') 
                      + self.alarmclock_value[5:])
        self.alarmclock_lcd.display(fixed_data)
        self.alarmclock_value = fixed_data
        
    def change_alarmclock_hour(self, value):
        fixed_data = str(int(value)).rjust(2, '0') + self.alarmclock_value[2:]
        self.alarmclock_lcd.display(fixed_data)
        self.alarmclock_value = fixed_data
        
    def add_alarm(self):
        file123 = open('data.txt', 'w')
        file123.write('Date:' + str(self.calendar_value) + ' Time:' + str(self.alarmclock_value) 
                      + ' Type:melody ' + str(self.type_of_alarm_value) + '\n')
        self.next_alarm.setText(('Следующий будильник ' + str(self.calendar_value)
                                 + ' в ' + str(self.alarmclock_value)))
        self.next_alarm.move(710, 525)
        self.next_alarm.resize(700, 50)
        file123.close()
        
    def change_alarm_type_value(self, text): 
        self.type_of_alarm_value = 'music-' + str(text[-1])
        
    def clear_alarm_data(self):
        file = open('data.txt', 'w')
        file.write('')
        self.next_alarm.setText('Следующий будильник не установлен')
        
    
    
    

    def change_calendar_value(self):
        temp = str(self.calendar.selectedDate()).split('PyQt5.QtCore.QDate(')[1][:-1]
        self.calendar_value = '.'.join(temp.split(', '))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MainWindow()
    ex.show()
    sys.exit(app.exec())
